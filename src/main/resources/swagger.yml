openapi: 3.0.0
info:
  title: ToDoList
  version: 0.0.1

components:
  schemas:

    Pagination:
      type: object
      properties:
        offset:
          type: integer
          minimum: 0
          example: 0
        limit:
          type: integer
          example: 100

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date
          example: "2023‑09‑25 17:45:30.005"
        message:
          type: string
          format: date
          example: 'Not Found'

    TaskRequest:
      type: object
      properties:
        description:
          type: string
          example: 'Call Maria'
        deadline:
          type: string
          example: 'today'
      required:
        - description
        - deadline

    TaskResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 12345
        description:
          type: string
          example: 'Call Maria'
        deadline:
          type: string
          example: 'today'


paths:
  /tasks:
    post:
      summary: 'Crate task'
      description: 'Registers a new task'
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/TaskRequest'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/TaskResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ErrorResponse'

    get:
      summary: 'All tasks'
      description: 'Returns the list of all registered tasks'
      tags:
        - Tasks
      parameters:
        - name: pagination
          in: query
          schema:
            '$ref': '#/components/schemas/Pagination'
          required: true
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  '$ref': '#/components/schemas/TaskResponse'

  /tasks/{id}:
    get:
      summary: 'Task info'
      description: 'Returns info about a particular task'
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  '$ref': '#/components/schemas/TaskResponse'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2023‑09‑25 17:45:30.005'
                message: 'Not found'

    patch:
      summary: 'Edit task'
      description: 'Edit info of an existing task'
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/TaskRequest'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/TaskResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2023‑09‑25 17:45:30.005'
                message: 'Bad Request'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2023‑09‑25 17:45:30.005'
                message: 'Not found'

    delete:
      summary: 'Delete task'
      description: 'Deletes a particular task'
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ErrorResponse'
              example:
                timestamp: '2023‑09‑25 17:45:30.005'
                message: 'Not found'

  /tasks/deadline/{deadline}:
    get:
      summary: 'All tasks'
      description: 'Returns the list of all registered tasks'
      tags:
        - Tasks
      parameters:
        - name: deadline
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  '$ref': '#/components/schemas/TaskResponse'
